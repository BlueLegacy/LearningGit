// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['jquery', 'modules/core/bundle', 'modules/clean/ajax', 'modules/clean/components/ajax_form', 'modules/clean/sso_login_checks'], function($j, core, ajax, AjaxForm, SsoLoginChecks) {
  var LoginForm, Notify;
  if (!window.$j) {
    window.$j = $j;
  }
  Notify = core.notify;
  LoginForm = (function() {
    LoginForm.LOGIN_SUCCESS = "db:login:success";

    LoginForm.MULTI_LOGIN_SUCCESS = "db:multilogin:success";

    function LoginForm($root, multi_login) {
      this.multi_login = multi_login;
      this._redirect_to = __bind(this._redirect_to, this);
      this._process_csrf = __bind(this._process_csrf, this);
      this._finish_login = __bind(this._finish_login, this);
      this._fill_two_factor_error = __bind(this._fill_two_factor_error, this);
      this._fill_login_error = __bind(this._fill_login_error, this);
      this._resend_code = __bind(this._resend_code, this);
      this._resend_code_success = __bind(this._resend_code_success, this);
      this._two_factor_success = __bind(this._two_factor_success, this);
      this._login_success = __bind(this._login_success, this);
      this._check_if_needs_captcha = __bind(this._check_if_needs_captcha, this);
      this._hide_captcha = __bind(this._hide_captcha, this);
      this._show_captcha = __bind(this._show_captcha, this);
      this._show_two_factor = __bind(this._show_two_factor, this);
      this._show_login = __bind(this._show_login, this);
      this._hide_sso = __bind(this._hide_sso, this);
      this._show_sso = __bind(this._show_sso, this);
      this.$login_form = $root.find('.login-form');
      this.$two_factor_form = $root.find('.two-factor-form');
      this.login_controller = new AjaxForm(this.$login_form);
      this.$login_form.on(AjaxForm.SUCCESS_EVENT, this._login_success);
      this.$login_form.on(AjaxForm.ERROR_EVENT, this._check_if_needs_captcha);
      this._check_if_needs_captcha();
      this.cont = this.$login_form.find("input[name='cont']").val();
      this.two_factor_controller = new AjaxForm(this.$two_factor_form);
      this.$two_factor_form.on(AjaxForm.SUCCESS_EVENT, this._two_factor_success);
      this.$two_factor_form.find(".resend-two-factor-code").click(this._resend_code);
      this.$login_form.find(".sso-optout a").click(((function(_this) {
        return function() {
          return _this._hide_sso(true);
        };
      })(this)));
      this.$login_form.find(".login-button").attr('disabled', false);
      if (this.$login_form.find("input[name='login_email']")[0].value) {
        this.$login_form.find("input[name='login_password']")[0].focus();
      }
      new SsoLoginChecks(this.$login_form.find("input[name='login_email']"), this._show_sso, this._hide_sso);
    }

    LoginForm.prototype._show_sso = function(show_option) {
      this.$login_form.find("input[name='login_password']").val("");
      this.$login_form.addClass("sso-required");
      if (show_option) {
        return this.$login_form.addClass("sso-optional");
      }
    };

    LoginForm.prototype._hide_sso = function(opted_out) {
      if (opted_out == null) {
        opted_out = false;
      }
      this.$login_form.removeClass("sso-required sso-optional");
      if (opted_out) {
        return this.$login_form.find("input[name='login_password']").focus();
      }
    };

    LoginForm.prototype._show_login = function() {
      this.$two_factor_form.hide();
      $j(".login-register-header, .login-register-switch").show();
      this.$login_form.show();
      return this.$login_form.find("input[name='login_password']").val("");
    };

    LoginForm.prototype._show_two_factor = function() {
      $j(".login-register-header, .login-register-switch").hide();
      this.$login_form.hide();
      this.$two_factor_form.show();
      return this.$two_factor_form.find("input[name='code']").val("").focus();
    };

    LoginForm.prototype._show_captcha = function() {
      var recaptcha_container, recaptcha_public_key;
      recaptcha_container = this.$login_form.find(".recaptcha-container");
      if (!recaptcha_container.is(':visible')) {
        recaptcha_public_key = this.$login_form.find("input[name='recaptcha_public_key']").val();
        $j.getScript("https://www.google.com/recaptcha/api/js/recaptcha_ajax.js", function() {

          /*global: Recaptcha defined in third-party script */
          return Recaptcha.create(recaptcha_public_key, "divRecaptcha", {
            theme: "custom"
          });
        });
      } else {
        Recaptcha.reload();
      }
      return recaptcha_container != null ? recaptcha_container.show() : void 0;
    };

    LoginForm.prototype._hide_captcha = function() {
      var _ref;
      return (_ref = this.$login_form.find(".recaptcha-container")) != null ? _ref.hide() : void 0;
    };

    LoginForm.prototype._check_if_needs_captcha = function(__, response) {
      if (!this.$login_form.find(".recaptcha-container").length) {
        return;
      }
      return ajax.WebRequest({
        url: "/needs_captcha",
        data: {
          email: this.$login_form.find("input[name='login_email']").val()
        },
        success: (function(_this) {
          return function(response_string) {
            try {
              response = JSON.parse(response_string);
              if (response.needs_login_captcha) {
                return _this._show_captcha();
              } else {
                return _this._hide_captcha();
              }
            } catch (_error) {
              __ = _error;
              return Notify.error(Notify.DEFAULT_ERROR);
            }
          };
        })(this)
      });
    };

    LoginForm.prototype._login_success = function(__, response) {
      var msg;
      switch (response.status) {
        case "OK":
          return this._finish_login(response);
        case "TWOFACTOR":
          if (response.last_four_digits) {
            this.$two_factor_form.addClass("hide-authenticator");
            this.$two_factor_form.find(".last-four-digits").text(response.last_four_digits);
          } else {
            this.$two_factor_form.addClass("hide-sms");
          }
          this.$two_factor_form.find("input[name='remember_me']").val(response.remember_me);
          return this._show_two_factor();
        case "SSO":
          return this._redirect_to(response.sso_url);
        case "RATELIMIT":
          return this._fill_login_error(_("You've tried to log in too many times. Please try again in a few minutes."));
        case "ERROR":
          msg = response.html_response ? new HTML(response.message) : response.message;
          return Notify.error(msg);
        default:
          return Notify.error();
      }
    };

    LoginForm.prototype._two_factor_success = function(__, response) {
      switch (response.status) {
        case "OK":
          return this._finish_login(response);
        case "REQUIRES_ROLE":
          this._show_login();
          return this._fill_login_error(response.message);
        case "EXPIRED":
          return this._fill_two_factor_error(_("This code has expired"));
        case "RATELIMIT":
          return this._fill_two_factor_error(_("You've tried to log in too many times. Please try again in a few minutes."));
        case "INVALID":
          return this._fill_two_factor_error(_("Invalid code"));
        case "ERROR":
          return Notify.error(response.message);
        default:
          return Notify.error();
      }
    };

    LoginForm.prototype._resend_code_success = function(response_string) {
      switch (response_string) {
        case 'OK':
          return Notify.success(_('We sent you another code. It may take a few minutes to arrive.'));
        case "RATELIMIT":
          return this._fill_two_factor_error(_("You've tried to log in too many times. Please try again in a few minutes."));
        case 'UNREACHABLE':
          return this._fill_two_factor_error(_("We couldn't reach your phone number. Are you sure it's correct?"));
        case 'EXPIRED':
          return this._fill_two_factor_error(_("Sorry, your phone code has expired. Please log in again."));
        case 'BADCARRIER':
          return this._fill_two_factor_error(_("Unfortunately, your carrier is not supported at this time."));
        case 'INVALIDNUMBER':
          return this._fill_two_factor_error(_("That is not a valid phone number."));
        case 'NOTAMOBILE':
          return this._fill_two_factor_error(_("That phone number does not appear to be a valid mobile number."));
        default:
          return Notify.error();
      }
    };

    LoginForm.prototype._resend_code = function() {
      ajax.WebRequest({
        url: "/twofactor_resend",
        success: this._resend_code_success,
        error: function() {
          return Notify.error();
        }
      });
      return false;
    };

    LoginForm.prototype._fill_login_error = function(message_text) {
      return AjaxForm.fill_errors(this.$login_form, {
        login_email: {
          message_text: message_text
        }
      });
    };

    LoginForm.prototype._fill_two_factor_error = function(message_text) {
      return AjaxForm.fill_errors(this.$two_factor_form, {
        code: {
          message_text: message_text
        }
      });
    };

    LoginForm.prototype._finish_login = function(response) {
      var evt;
      this._process_csrf(response);
      evt = this.multi_login ? LoginForm.MULTI_LOGIN_SUCCESS : LoginForm.LOGIN_SUCCESS;
      this.$login_form.trigger(evt, response);
      if (this.cont) {
        return this._redirect_to(this.cont);
      }
    };

    LoginForm.prototype._process_csrf = function(response) {
      if (response.csrf_token != null) {
        return Constants.TOKEN = response.csrf_token;
      }
    };

    LoginForm.prototype._redirect_to = function(url) {
      if (url) {
        return window.location.href = url;
      }
    };

    return LoginForm;

  })();
  window.LoginForm = LoginForm;
  return LoginForm;
});

//# sourceMappingURL=login_form.map
