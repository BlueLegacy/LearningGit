// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['modules/clean/ajax'], function(ajax) {
  var SsoLoginChecks;
  SsoLoginChecks = (function() {
    function SsoLoginChecks($email_input, show_sso_fn, hide_sso_fn) {
      this.$email_input = $email_input;
      this.show_sso_fn = show_sso_fn;
      this.hide_sso_fn = hide_sso_fn;
      this._check_sso_state = __bind(this._check_sso_state, this);
      $email_input.on("input keyup change", this._check_sso_state);
    }

    SsoLoginChecks._sso_check_in_flight = {};

    SsoLoginChecks._sso_check_cache = {};

    SsoLoginChecks.prototype._check_sso_state = function() {
      var cache_key, email, triggered_val;
      triggered_val = this.$email_input.val();
      email = triggered_val.trim();
      if (!email.match(/^[^@\s]+@[^@\s]+\.[A-Za-z]{2,}$/)) {
        return this.hide_sso_fn();
      } else {
        cache_key = email.toLowerCase();
        if (cache_key in SsoLoginChecks._sso_check_cache) {
          return this._handle_sso_state(SsoLoginChecks._sso_check_cache[cache_key]);
        } else if (!SsoLoginChecks._sso_check_in_flight[cache_key]) {
          SsoLoginChecks._sso_check_in_flight[cache_key] = true;
          return ajax.WebRequest({
            url: "/sso_state",
            data: {
              "email": email
            },
            success: (function(_this) {
              return function(data) {
                data = JSON.parse(data);
                delete SsoLoginChecks._sso_check_in_flight[cache_key];
                SsoLoginChecks._sso_check_cache[cache_key] = data["user_sso_state"];
                if (_this.$email_input.val() !== triggered_val) {
                  return _this._check_sso_state();
                } else {
                  return _this._handle_sso_state(data["user_sso_state"]);
                }
              };
            })(this),
            error: (function(_this) {
              return function() {
                delete SsoLoginChecks._sso_check_in_flight[cache_key];
                return _this.hide_sso_fn();
              };
            })(this)
          });
        }
      }
    };

    SsoLoginChecks.prototype._handle_sso_state = function(sso_state) {
      if (sso_state === "required") {
        return this.show_sso_fn(false);
      } else if (sso_state === "optional") {
        return this.show_sso_fn(true);
      } else {
        return this.hide_sso_fn();
      }
    };

    return SsoLoginChecks;

  })();
  window.SsoLoginChecks = SsoLoginChecks;
  return SsoLoginChecks;
});

//# sourceMappingURL=sso_login_checks.map
