// Generated by CoffeeScript 1.7.1
define(['jquery', 'modules/core/browser', 'modules/core/dom', 'modules/core/notify', 'modules/clean/viewer', 'modules/clean/components/login_form', 'modules/clean/dbmodal'], function($j, Browser, dom, Notify, Viewer, LoginForm, _arg) {
  var DBModal, MultiaccountLogin;
  DBModal = _arg.DBModal;
  MultiaccountLogin = (function() {
    function MultiaccountLogin() {}

    MultiaccountLogin.$element = function() {
      return $j('#db-modal-multiaccount-login-modal');
    };

    MultiaccountLogin.set_during_login_callback = function(fn) {
      assert(!this._during_login_callback, 'already have a during_login_callback');
      return this._during_login_callback = fn;
    };

    MultiaccountLogin.show_modal = function(options) {
      var $form, role, title, user, _ref;
      if (options == null) {
        options = {};
      }
      this.$element = $j.isFunction(this.$element) ? this.$element() : this.$element;
      assert((_ref = this.$element) != null ? _ref.length : void 0, "MultiaccountLogin needs its @$element to be set");
      assert(!((options.on_success != null) && (options.success_href != null)), "on_success and success_href are mutually exclusive");
      if (options.user != null) {
        user = Viewer.get_viewer().get_user_by_id(String(options.user), true);
      } else if (options.user_id != null) {
        user = Viewer.get_viewer().get_user_by_id(options.user_id, true);
      } else if (options.role != null) {
        user = Viewer.get_viewer().get_user_by_role(options.role, true);
      }
      assert(user != null, "invalid user");
      role = user.role;
      assert(!Viewer.get_viewer().is_user_signed_in(user), "called MultiaccountLogin for a user that's already signed in");
      if (role === 'personal') {
        title = _("Sign in to your personal Dropbox");
      } else {
        title = _("Sign in to your %(team_name)s Dropbox").format({
          team_name: Viewer.get_viewer().team_name
        });
      }
      $form = this.$element.find('form');
      dom.controller($form).reset();
      dom.controller($form).set_input_value("login_email", user.email);
      this.auth_success_callback = (function(_this) {
        return function() {
          var finish_login_callback;
          Viewer.get_viewer()._sign_in_all_users();
          _this.set_logged_out_role(null);
          finish_login_callback = function(error_message) {
            if (error_message != null) {
              Notify.error(error_message);
              Viewer.get_viewer()._sign_out_user_by_id(user.id);
              _this.set_logged_out_role(user.role);
              _this.modal.hide();
              return;
            }
            if (options.success_href != null) {
              if (Browser.get_uri() !== options.success_href) {
                return Browser.redirect(options.success_href);
              } else {
                return Browser.reload();
              }
            } else {
              _this.modal.hide();
              return typeof options.on_success === "function" ? options.on_success() : void 0;
            }
          };
          if ((_this._during_login_callback != null) && (options.success_href == null)) {
            _this._during_login_callback(user, finish_login_callback);
          } else {
            finish_login_callback();
          }
          return false;
        };
      })(this);
      $j(document).off(LoginForm.MULTI_LOGIN_SUCCESS);
      $j(document).on(LoginForm.MULTI_LOGIN_SUCCESS, this.auth_success_callback);
      this.modal = new DBModal({
        element_id: 'multiaccount-login-modal'
      });
      this.modal.show();
      this.modal.set_title(title);
      return this.$element.find('input[name="login_password"]').focus();
    };

    MultiaccountLogin.set_logged_out_role = function(role) {
      return this.logged_out_role = role;
    };

    MultiaccountLogin.set_team_name = function(team_name) {
      return this.team_name = team_name;
    };

    MultiaccountLogin.show_page_login_modal = function(onSuccess) {
      var options;
      if (!this.logged_out_role) {
        return;
      }
      options = {
        role: this.logged_out_role
      };
      if (typeof onSuccess === 'string') {
        options.success_href = onSuccess;
      } else if (typeof onSuccess === 'function') {
        options.on_success = onSuccess;
      }
      this.show_modal(options);
      return false;
    };

    return MultiaccountLogin;

  })();
  window.MultiaccountLogin = MultiaccountLogin;
  return MultiaccountLogin;
});

//# sourceMappingURL=multiaccount_login.map
